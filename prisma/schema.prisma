generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  GST         String?
  logo        String?
  stamp       String?
  email       String?   @unique // Optional and unique email address
  phone       String? // Optional phone number
  website     String? // Optional website URL
  industry    String? // Optional industry type
  foundedDate DateTime? // Optional founded date
  status      String? // Optional status (e.g., "active", "inactive")
  users       User[]
  addresses   Address[] // One-to-many relationship with Address
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  PO          PO[]
}

model Address {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  street      String
  city        String
  state       String
  postalCode  String
  country     String
  addressType AddressType // Enum for address type
  companyId   String      @db.Uuid // Change this to UUID
  company     Company     @relation(fields: [companyId], references: [id])
}

enum AddressType {
  BUSINESS
  SHIPPING
}

model User {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email            String            @unique
  emailVerified    DateTime?
  password         String
  name             String?
  mobile           String?
  role             Role              @default(USER)
  company          Company           @relation(fields: [companyId], references: [id])
  companyId        String            @db.Uuid
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
  qualityAssurance QualityAssurance?
  pos              PO[]
  rfps             RFP[]
  Vendor           Vendor[]
  approversList    ApproversList[]
  accounts         Account[]

  @@index([name, email, mobile]) // Add index for searching by name
}

model Account {
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

enum Role {
  ADMIN
  PR_MANAGER
  FINANCE_MANAGER
  ACCOUNTANT
  QUALITY_ASSURANCE
  USER
}

model Vendor {
  id                 String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customerCode       String?
  primaryName        String
  companyName        String
  contactDisplayName String
  email              String?
  workPhone          String?
  mobile             String?
  website            String?
  gstin              String?     @unique
  msmeNo             String?
  address            String?
  customerState      String?
  customerCity       String?
  country            String?
  zip                String?
  remarks            String?
  pan                String?
  verifiedById       String?     @db.Uuid
  verifiedBy         User?       @relation(fields: [verifiedById], references: [id])
  created_at         DateTime    @default(now())
  updated_at         DateTime    @updatedAt
  Quotation          Quotation[]

  @@index([primaryName, companyName, contactDisplayName, email, mobile, gstin]) // Add index for searching
}

model Payment {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  invoice    Invoice  @relation(fields: [invoiceId], references: [id])
  invoiceId  String   @db.Uuid
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model PO {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  poId        String    @unique
  quotation   Quotation @relation(fields: [quotationId], references: [id])
  quotationId String    @unique @db.Uuid
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @db.Uuid
  invoice     Invoice?
  remarks     String
  companyId   String    @db.Uuid // Field for company ID
  company     Company   @relation(fields: [companyId], references: [id]) // Relation to Company
  rfpId       String    @unique @db.Uuid // New field for RFP ID
  rfp         RFP       @relation(fields: [rfpId], references: [id]) // One-to-one relation to RFP
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
}

model GoodStatus {
  id                       String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  invoice                  Invoice          @relation(fields: [invoiceId], references: [id])
  invoiceId                String           @unique @db.Uuid
  deliveryStatus           Boolean
  qualityAssurance         Boolean
  qualityAssuranceLeader   QualityAssurance @relation(fields: [qualityAssuranceLeaderId], references: [id])
  qualityAssuranceLeaderId String           @db.Uuid
  created_at               DateTime         @default(now())
  updated_at               DateTime         @updatedAt
}

model ProductCategory {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String    @unique
  products   Product[]
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model Product {
  id                String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String
  modelNo           String
  specification     String
  productCategory   ProductCategory @relation(fields: [productCategoryId], references: [id])
  productCategoryId String          @db.Uuid
  rfpProducts       RFPProduct[]
  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt

  @@index([name, modelNo, specification]) // Add index for searching
}

model Invoice {
  id         String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  po         PO          @relation(fields: [poId], references: [id])
  poId       String      @unique @db.Uuid
  payments   Payment[]
  goodStatus GoodStatus?
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
}

model SupportingDocument {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  quotation    Quotation @relation(fields: [quotationId], references: [id])
  quotationId  String    @db.Uuid
  documentType String // e.g., "quotation", "bill", "productCatalog"
  documentName String
  location     String
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
}

model Quotation {
  id                    String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  rfp                   RFP                  @relation(fields: [rfpId], references: [id])
  rfpId                 String               @db.Uuid
  vendor                Vendor               @relation(fields: [vendorId], references: [id])
  vendorId              String               @db.Uuid
  isPrimary             Boolean              @default(false)
  refNo                 String?
  totalAmount           Decimal              @db.Decimal(10, 2)
  totalAmountWithoutGST Decimal              @db.Decimal(10, 2)
  po                    PO?
  supportingDocuments   SupportingDocument[]
  vendorPricings        VendorPricing[]
  otherCharges          OtherCharge[]
  created_at            DateTime             @default(now())
  updated_at            DateTime             @updatedAt
}

model OtherCharge {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  quotation   Quotation @relation(fields: [quotationId], references: [id])
  quotationId String    @db.Uuid
  name        String
  price       Decimal   @db.Decimal(10, 2)
  gst         Decimal   @db.Decimal(5, 2)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
}

model RFP {
  id                   String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  rfpId                String          @unique
  requirementType      String
  dateOfOrdering       DateTime
  deliveryLocation     String
  deliveryByDate       DateTime
  user                 User            @relation(fields: [userId], references: [id])
  userId               String          @db.Uuid
  rfpStatus            RFPStatus       @default(DRAFT)
  preferredQuotationId String?         @db.Uuid
  quotations           Quotation[]
  approversList        ApproversList[]
  rfpProducts          RFPProduct[]
  created_at           DateTime        @default(now())
  updated_at           DateTime        @updatedAt
  po                   PO?
}

enum RFPStatus {
  DRAFT //RFP Created but not submitted 
  SUBMITTED //Submitted to finance
  PO_CREATED
  ADVANCE_PAID
  INVOICE_RECEIVED
  GRN_RECEIVED
  PAYMENT_DONE // (PO Complete) 
}

model RFPProduct {
  id             String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  rfp            RFP             @relation(fields: [rfpId], references: [id])
  rfpId          String          @db.Uuid
  product        Product         @relation(fields: [productId], references: [id])
  productId      String          @db.Uuid
  description    String?
  quantity       Int
  vendorPricings VendorPricing[]
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt

  @@unique([rfpId, productId])
}

model VendorPricing {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  quotation    Quotation  @relation(fields: [quotationId], references: [id])
  quotationId  String     @db.Uuid
  rfpProduct   RFPProduct @relation(fields: [rfpProductId], references: [id])
  rfpProductId String     @db.Uuid
  price        Decimal    @db.Decimal(10, 2)
  GST          Int
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt

  @@unique([quotationId, rfpProductId])
}

model ApproversList {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  rfpId      String    @db.Uuid
  rfp        RFP       @relation(fields: [rfpId], references: [id])
  user       User      @relation(fields: [userId], references: [id])
  userId     String    @db.Uuid
  approved   Boolean   @default(false)
  approvedAt DateTime?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  @@unique([rfpId, userId])
}

model QualityAssurance {
  id           String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user         User         @relation(fields: [userId], references: [id])
  userId       String       @unique @db.Uuid
  goodStatuses GoodStatus[]
  created_at   DateTime     @default(now())
  updated_at   DateTime     @default(now())
}

model EmailVerificationToken {
  id        Int      @id @default(autoincrement())
  email     String
  token     String   @unique @db.Uuid
  expiresAt DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  email     String
  token     String   @unique @db.Uuid
  expiresAt DateTime

  @@unique([email, token])
}
