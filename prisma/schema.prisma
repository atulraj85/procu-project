generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  address    String?
  users      User[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model User {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email            String            @unique
  password         String
  name             String?
  role             Role              @default(USER)
  company          Company           @relation(fields: [companyId], references: [id])
  companyId        String            @db.Uuid
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
  qualityAssurance QualityAssurance?
  pos              PO[]
  rfps             RFP[]
}

enum Role {
  ADMIN
  PR_MANAGER
  FINANCE_MANAGER
  ACCOUNTANT
  QUALITY_ASSURANCE
  USER
}

model Vendor {
  id                 String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customerCode       String?
  primaryName        String
  companyName        String
  contactDisplayName String
  email              String?
  workPhone          String?
  mobile             String?
  website            String?
  openingBalance     String?
  gstin              String?
  msmeNo             String?
  address            String?
  currency           String          @default("INR")
  customerTerms      String?
  customerState      String?
  customerCity       String?
  country            String          @default("India")
  zip                String?
  fax                String?
  dlNumber           String?
  remarks            String?
  openingType        String?
  pan                String?
  productCategory    ProductCategory @relation(fields: [productCategoryId], references: [id])
  productCategoryId  Int
  quotations         Quotation[]
  created_at         DateTime        @default(now())
  updated_at         DateTime        @updatedAt
}

model Payment {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  invoice    Invoice  @relation(fields: [invoiceId], references: [id])
  invoiceId  String   @db.Uuid
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model ProductCategory {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  products   Product[]
  vendors    Vendor[]
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model PO {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  quotation   Quotation @relation(fields: [quotationId], references: [id])
  quotationId String    @unique @db.Uuid
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @db.Uuid
  invoice     Invoice?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
}

model GoodStatus {
  id                       String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  invoice                  Invoice          @relation(fields: [invoiceId], references: [id])
  invoiceId                String           @unique @db.Uuid
  deliveryStatus           Boolean
  qualityAssurance         Boolean
  qualityAssuranceLeader   QualityAssurance @relation(fields: [qualityAssuranceLeaderId], references: [id])
  qualityAssuranceLeaderId String           @db.Uuid
  created_at               DateTime         @default(now())
  updated_at               DateTime         @updatedAt
}

model Product {
  id                Int             @id @default(autoincrement())
  name              String
  modelNo           String
  specification     String
  productCategory   ProductCategory @relation(fields: [productCategoryId], references: [id])
  productCategoryId Int
  rfpProducts       RFPProduct[]
  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt
}

model Invoice {
  id         String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  po         PO          @relation(fields: [poId], references: [id])
  poId       String      @unique @db.Uuid
  payments   Payment[]
  goodStatus GoodStatus?
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
}

model Quotation {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  rfp        RFP      @relation(fields: [rfpId], references: [id])
  rfpId      String   @unique @db.Uuid
  vendor     Vendor   @relation(fields: [vendorId], references: [id])
  vendorId   String   @db.Uuid
  billAmount Decimal  @db.Decimal(10, 2)
  po         PO?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model QualityAssurance {
  id           String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user         User         @relation(fields: [userId], references: [id])
  userId       String       @unique @db.Uuid
  goodStatuses GoodStatus[]
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt
}

model RFP {
  id                String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  requirementType   String
  dateOfOrdering    DateTime
  deliveryLocation  String
  deliveryByDate    DateTime
  lastDateToRespond DateTime
  user              User            @relation(fields: [userId], references: [id])
  userId            String          @db.Uuid
  quotation         Quotation?
  approversList     ApproversList[]
  rfpProducts       RFPProduct[]
  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt
}

model RFPProduct {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  rfp       RFP     @relation(fields: [rfpId], references: [id])
  rfpId     String  @db.Uuid
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([rfpId, productId])
}

model Approver {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  email         String          @unique
  phone         String
  approversList ApproversList[]
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt
}

model ApproversList {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  rfp        RFP       @relation(fields: [rfpId], references: [id])
  rfpId      String    @db.Uuid
  approver   Approver  @relation(fields: [approverId], references: [id])
  approverId String    @db.Uuid
  approved   Boolean   @default(false)
  approvedAt DateTime?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([rfpId, approverId])
}
